// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AlbumType {
  SINGLE
  ALBUM
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                String              @id @default(uuid())
  username          String              @unique
  email             String              @unique
  password          String
  isArtist          Boolean             @default(false)
  isAdmin           Boolean             @default(false)
  Artist            Artist?
  artistRoleRequest ArtistRoleRequest[]
  likedTracks       Track[]             @relation("LikedTracks")
  likedAlbums       Album[]             @relation("LikedAlbums")
}

model Artist {
  id                String              @id @default(uuid())
  name              String
  userId            String              @unique
  user              User                @relation(fields: [userId], references: [id])
  tracks            Track[]
  albums            Album[]
}

model Track {
  id       String         @id @default(uuid())
  title    String
  audio    String
  artistId String
  artist   Artist         @relation(fields: [artistId], references: [id])
  albums   TrackOnAlbum[]
  likedBy  User[]         @relation("LikedTracks")
}

model Album {
  id          String         @id @default(uuid())
  title       String
  artistId    String
  artist      Artist         @relation(fields: [artistId], references: [id])
  tracks      TrackOnAlbum[]
  releaseDate DateTime
  type        AlbumType
  logo        String?
  status      RequestStatus  @default(PENDING)
  likedBy     User[]         @relation("LikedAlbums")
}

model TrackOnAlbum {
  id            String         @id @default(uuid())
  albumId       String?
  trackId       String
  album         Album?         @relation(fields: [albumId], references: [id])
  track         Track          @relation(fields: [trackId], references: [id])
  order         Int
}

model ArtistRoleRequest {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  name      String
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
}